package Service;

import db.Database;
import model.MenuItem;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class MenuService {
    public List<MenuItem> getAllMenuItems() throws SQLException {
        List<MenuItem> menuItems = new ArrayList<>();
        String sql = "SELECT * FROM menu_item";
        try (Connection connection = Database.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String name = resultSet.getString("name");
                double price = resultSet.getDouble("price");
                boolean available = resultSet.getBoolean("available");
                menuItems.add(new MenuItem(id, name, price, available));
            }
        }
        return menuItems;
    }

    public MenuItem getMenuItemById(int id) throws SQLException {
        String sql = "SELECT * FROM menu_item WHERE id = ?";
        try (Connection connection = Database.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    String name = resultSet.getString("name");
                    double price = resultSet.getDouble("price");
                    boolean available = resultSet.getBoolean("available");
                    return new MenuItem(id, name, price, available);
                }
            }
        }
        return null;
    }

    public void addMenuItem(MenuItem menuItem) throws SQLException {
        String sql = "INSERT INTO menu_item (name, price, available) VALUES (?, ?, ?)";
        try (Connection connection = Database.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, menuItem.getName());
            preparedStatement.setDouble(2, menuItem.getPrice());
            preparedStatement.setBoolean(3, menuItem.isAvailable());
            preparedStatement.executeUpdate();
        }
    }

    public void updateMenuItem(MenuItem menuItem) throws SQLException {
        String sql = "UPDATE menu_item SET name = ?, price = ?, available = ? WHERE id = ?";
        try (Connection connection = Database.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setString(1, menuItem.getName());
            preparedStatement.setDouble(2, menuItem.getPrice());
            preparedStatement.setBoolean(3, menuItem.isAvailable());
            preparedStatement.setInt(4, menuItem.getId());
            preparedStatement.executeUpdate();
        }
    }

    public void deleteMenuItem(int id) throws SQLException {
        String sql = "DELETE FROM menu_item WHERE id = ?";
        try (Connection connection = Database.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setInt(1, id);
            preparedStatement.executeUpdate();
        }
    }
}
