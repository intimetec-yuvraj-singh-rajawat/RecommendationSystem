package handler;

import Service.MenuService;
import Service.UserService;
import model.MenuItem;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.SQLException;
import java.util.List;

public class ClientHandler implements Runnable {
    private final Socket clientSocket;
    private final UserService userService;
    private final MenuService menuService;
    private PrintWriter out;
    private BufferedReader in;

    public ClientHandler(Socket clientSocket) {
        this.clientSocket = clientSocket;
        this.userService = new UserService();
        this.menuService = new MenuService();
        try {
            this.out = new PrintWriter(clientSocket.getOutputStream(), true);
            this.in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith("LOGIN ")) {
                    handleLogin(inputLine);
                } else if (inputLine.equalsIgnoreCase("LOGOUT")) {
                    handleLogout();
                    break;
                } else if (inputLine.startsWith("ADD MENU")) {
                    handleAddMenuItem(inputLine);
                } else if (inputLine.startsWith("UPDATE MENU")) {
                    handleUpdateMenuItem(inputLine);
                } else if (inputLine.startsWith("DELETE MENU")) {
                    handleDeleteMenuItem(inputLine);
                } else {
                    out.println("Unknown command");
                }
            }
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        } finally {
            closeResources();
            System.out.println("Client disconnected");
        }
    }

    private void handleLogin(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ");
        if (parts.length == 3) {
            String username = parts[1];
            String password = parts[2];
            if (userService.validateLogin(username, password)) {
                out.println("LOGIN SUCCESSFUL");
                String roleName = userService.getRoleName(username, password);
                out.println("ROLE: " + roleName);
            } else {
                out.println("LOGIN FAILED");
            }
        } else {
            out.println("Invalid LOGIN command");
        }
    }

    private void handleLogout() {
        out.println("LOGOUT SUCCESSFUL");
    }

    private void handleAddMenuItem(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ");
        if (parts.length == 4) {
            String name = parts[2];
            double price = Double.parseDouble(parts[3]);
            boolean available = Boolean.parseBoolean(parts[4]);
            MenuItem menuItem = new MenuItem(name, price, available);
            boolean added = menuService.addMenuItem(menuItem);
            if (added) {
                out.println("MENU ITEM ADDED");
            } else {
                out.println("Failed to add menu item");
            }
        } else {
            out.println("Invalid ADD MENU command");
        }
    }

    private void handleUpdateMenuItem(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ");
        if (parts.length == 5) {
            int id = Integer.parseInt(parts[2]);
            String name = parts[3];
            double price = Double.parseDouble(parts[4]);
            boolean available = Boolean.parseBoolean(parts[5]);
            MenuItem menuItem = new MenuItem(id, name, price, available);
            boolean updated = menuService.updateMenuItem(menuItem);
            if (updated) {
                out.println("MENU ITEM UPDATED");
            } else {
                out.println("Failed to update menu item");
            }
        } else {
            out.println("Invalid UPDATE MENU command");
        }
    }

    private void handleDeleteMenuItem(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ");
        if (parts.length == 3) {
            int id = Integer.parseInt(parts[2]);
            boolean deleted = menuService.deleteMenuItem(id);
            if (deleted) {
                out.println("MENU ITEM DELETED");
            } else {
                out.println("Failed to delete menu item");
            }
        } else {
            out.println("Invalid DELETE MENU command");
        }
    }

    private void closeResources() {
        try {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
            if (clientSocket != null && !clientSocket.isClosed()) {
                clientSocket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void sendMessage(String message) {
        if (out != null) {
            out.println(message);
        }
    }
}
