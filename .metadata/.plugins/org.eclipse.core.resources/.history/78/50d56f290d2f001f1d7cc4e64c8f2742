package handler;

import service.UserService;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class ClientHandler implements Runnable {
    private final Socket clientSocket;
    private final UserService userService;
    private PrintWriter out;
    private BufferedReader in;

    public ClientHandler(Socket clientSocket) {
        this.clientSocket = clientSocket;
        this.userService = new UserService();
        try {
            this.out = new PrintWriter(clientSocket.getOutputStream(), true);
            this.in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith("LOGIN ")) {
                    handleLogin(inputLine);
                } else if (inputLine.equalsIgnoreCase("LOGOUT")) {
                    handleLogout();
                    break;
                } else if (inputLine.equalsIgnoreCase("LIST MENU")) {
                    handleListMenu();
                } else if (inputLine.startsWith("ADD MENU ") && isAdmin()) {
                    String[] parts = inputLine.split(" ", 3);
                    if (parts.length == 3) {
                        String menuItem = parts[2];
                        handleAddMenuItem(menuItem);
                    } else {
                        out.println("Invalid ADD MENU command");
                    }
                } else if (inputLine.startsWith("UPDATE MENU ") && isAdmin()) {
                    String[] parts = inputLine.split(" ", 4);
                    if (parts.length == 4) {
                        int itemId = Integer.parseInt(parts[2]);
                        String updatedItem = parts[3];
                        handleUpdateMenuItem(itemId, updatedItem);
                    } else {
                        out.println("Invalid UPDATE MENU command");
                    }
                } else if (inputLine.startsWith("DELETE MENU ") && isAdmin()) {
                    String[] parts = inputLine.split(" ", 3);
                    if (parts.length == 3) {
                        int itemId = Integer.parseInt(parts[2]);
                        handleDeleteMenuItem(itemId);
                    } else {
                        out.println("Invalid DELETE MENU command");
                    }
                } else {
                    out.println("Unknown command");
                }
            }
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        } finally {
            closeResources();
            System.out.println("Client disconnected");
        }
    }

    private void handleLogin(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ");
        if (parts.length == 3) {
            String username = parts[1];
            String password = parts[2];
            if (userService.validateLogin(username, password)) {
                out.println("LOGIN SUCCESSFUL");
                String roleName = userService.getRoleName(username, password);
                out.println("ROLE: " + roleName);
            } else {
                out.println("LOGIN FAILED");
            }
        } else {
            out.println("Invalid LOGIN command");
        }
    }

    private void handleLogout() {
        out.println("LOGOUT SUCCESSFUL");
        try {
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void handleListMenu() {
        List<String> menuItems = getMenuItems();
        if (menuItems.isEmpty()) {
            out.println("No menu items available.");
        } else {
            out.println("MENU ITEMS:");
            for (String item : menuItems) {
                out.println(item);
            }
        }
    }

    private void handleAddMenuItem(String menuItem) {
        // Logic to add menu item to database
        out.println("Added: " + menuItem);
        // Additional database operations can be added here
    }

    private void handleUpdateMenuItem(int itemId, String updatedItem) {
        // Logic to update menu item in database
        out.println("Updated item " + itemId + " to: " + updatedItem);
        // Additional database operations can be added here
    }

    private void handleDeleteMenuItem(int itemId) {
        // Logic to delete menu item from database
        out.println("Deleted item " + itemId);
        // Additional database operations can be added here
    }

    private List<String> getMenuItems() {
        // Dummy implementation - replace with actual database retrieval
        List<String> menuItems = new ArrayList<>();
        menuItems.add("1. Burger");
        menuItems.add("2. Pizza");
        menuItems.add("3. Salad");
        return menuItems;
    }

    private boolean isAdmin() {
        // Dummy implementation - replace with actual role check
        return true; // For testing purposes, assuming always admin
    }

    private void closeResources() {
        try {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
            if (clientSocket != null && !clientSocket.isClosed()) {
                clientSocket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void sendMessage(String message) {
        if (out != null) {
            out.println(message);
        }
    }
}
