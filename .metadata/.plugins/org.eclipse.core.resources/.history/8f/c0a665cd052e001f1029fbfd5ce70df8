package ClientServer;

import java.io.*;
import java.net.*;
import java.sql.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class CafeteriaServer {
    private static final int PORT = 12345;
    private static Map<String, ClientHandler> clients = new ConcurrentHashMap<>();

    public static void main(String[] args) {
        System.out.println("Cafeteria Server is running...");
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            while (true) {
                Socket clientSocket = serverSocket.accept();
                ClientHandler clientHandler = new ClientHandler(clientSocket);
                new Thread(clientHandler).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to send a message to a specific client
    public static synchronized void sendMessageToClient(String clientId, String message) {
        ClientHandler clientHandler = clients.get(clientId);
        if (clientHandler != null) {
            clientHandler.sendMessage(message);
        }
    }

    // Inner class for handling individual client connections
    private static class ClientHandler implements Runnable {
        private Socket socket;
        private PrintWriter out;
        private BufferedReader in;
        private String clientId;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                out = new PrintWriter(socket.getOutputStream(), true);
                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

                // Prompt client for client ID
                out.println("Enter your client ID:");
                clientId = in.readLine();
                System.out.println("Received client ID: " + clientId);

                // Authentication logic
                if (!authenticateUser(clientId)) {
                    out.println("Authentication failed. Connection closing.");
                    closeConnections();
                    return;
                }

                out.println("Authentication successful.");
                clients.put(clientId, this);

                String message;
                while ((message = in.readLine()) != null) {
                    System.out.println("Received from " + clientId + ": " + message);
                    // Example logic to process the message and send a response
                    sendMessageToClient(clientId, "Echo: " + message);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                closeConnections();
                if (clientId != null) {
                    clients.remove(clientId);
                }
            }
        }

        // Method to send a message to the client
        public void sendMessage(String message) {
            if (out != null) {
                out.println(message);
            }
        }

        // Method to close connections
        private void closeConnections() {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
                if (socket != null) {
                    socket.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Authentication method
        private boolean authenticateUser(String clientId) {
            System.out.println("Authenticating client ID: " + clientId);
            // Replace with your authentication logic (database query, etc.)
            // Example:
            // return clientId.equals("user1");  // Simulated authentication
            return true;  // For testing purposes, always return true
        }
    }
}
