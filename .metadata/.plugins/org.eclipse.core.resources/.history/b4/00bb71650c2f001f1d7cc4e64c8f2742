package handler;

import Service.MenuService;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.SQLException;

public class ClientHandler implements Runnable {
    private final Socket clientSocket;
    private final MenuService menuService;
    private PrintWriter out;

    public ClientHandler(Socket clientSocket) {
        this.clientSocket = clientSocket;
        this.menuService = new MenuService(); 
    }

    @Override
    public void run() {
        try (BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))) {
            out = new PrintWriter(clientSocket.getOutputStream(), true); 
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith("LOGIN ")) {
                    handleLogin(inputLine);
                } else if (inputLine.startsWith("ADD MENU ")) {
                    handleAddMenuItem(inputLine);
                } else if (inputLine.startsWith("UPDATE MENU ")) {
                    handleUpdateMenuItem(inputLine);
                } else if (inputLine.startsWith("DELETE MENU ")) {
                    handleDeleteMenuItem(inputLine);
                } else {
                    out.println("Unknown command");
                }
            }
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println("Client disconnected");
        }
    }

    private void handleLogin(String inputLine) throws SQLException {
        // Implement login logic
    }

    private void handleAddMenuItem(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ", 4);
        if (parts.length == 4) {
            String name = parts[2];
            double price = Double.parseDouble(parts[3]);
            boolean available = true; // You can add availability handling if needed
            // Create MenuItem object and call service to add to database
            try {
                menuService.addMenuItem(new MenuItem(0, name, price, available));
                out.println("MENU ITEM ADDED");
            } catch (SQLException e) {
                out.println("ERROR: Unable to add menu item");
                e.printStackTrace();
            }
        } else {
            out.println("Invalid ADD MENU command");
        }
    }

    private void handleUpdateMenuItem(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ", 5);
        if (parts.length == 5) {
            int id = Integer.parseInt(parts[2]);
            String name = parts[3];
            double price = Double.parseDouble(parts[4]);
            boolean available = true; // You can add availability handling if needed
            // Create MenuItem object and call service to update in database
            try {
                menuService.updateMenuItem(new MenuItem(id, name, price, available));
                out.println("MENU
