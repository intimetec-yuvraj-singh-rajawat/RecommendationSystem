package handler;

import Service.MenuService;
import Service.UserService;
import model.MenuItem;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.SQLException;
import java.util.List;

public class ClientHandler implements Runnable {
    private final Socket clientSocket;
    private final UserService userService;
    private final MenuService menuService;
    private PrintWriter out;
    private BufferedReader in;

    public ClientHandler(Socket clientSocket) throws SQLException {
        this.clientSocket = clientSocket;
        this.userService = new UserService();
        this.menuService = new MenuService();
    }

    @Override
    public void run() {
        try {
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith("LOGIN ")) {
                    handleLogin(inputLine);
                } else if (inputLine.equalsIgnoreCase("LOGOUT")) {
                    handleLogout();
                    break;
                } else {
                    handleMenuOperations(inputLine);
                }
            }
        } catch (IOException | SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println("Client disconnected");
        }
    }

    private void handleLogin(String inputLine) throws SQLException {
        String[] parts = inputLine.split(" ");
        if (parts.length == 3) {
            String username = parts[1];
            String password = parts[2];
            if (userService.validateLogin(username, password)) {
                out.println("LOGIN SUCCESSFUL");
                String roleName = userService.getRoleName(username, password);
                out.println("ROLE: " + roleName);
                showMenu();
            } else {
                out.println("LOGIN FAILED");
            }
        } else {
            out.println("Invalid LOGIN command");
        }
    }

    private void showMenu() {
        out.println("Select an option:");
        out.println("1. View all menu items");
        out.println("2. Add a new menu item");
        out.println("3. Update an existing menu item");
        out.println("4. Delete a menu item");
        out.println("5. Logout");
    }

    private void handleLogout() {
        out.println("LOGOUT SUCCESSFUL");
        try {
            clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void handleMenuOperations(String inputLine) throws IOException, SQLException {
        String[] parts = inputLine.split(" ", 2);
        String operation = parts[0];
        if (parts.length > 1) {
            String operationDetails = parts[1];
            switch (operation) {
                case "1":
                    viewAllMenuItems();
                    break;
                case "ADD":
                    handleAddMenuItem(operationDetails);
                    break;
                case "UPDATE":
                    handleUpdateMenuItem(operationDetails);
                    break;
                case "DELETE":
                    handleDeleteMenuItem(operationDetails);
                    break;
                default:
                    out.println("Unknown command");
                    showMenu();
                    break;
            }
        } else {
            out.println("Invalid command format");
            showMenu();
        }
    }

    private void viewAllMenuItems() throws SQLException {
        List<MenuItem> menuItems = menuService.getAllMenuItems();
        for (MenuItem item : menuItems) {
            out.println(item);
        }
        showMenu();
    }

    private void handleAddMenuItem(String operationDetails) throws IOException, SQLException {
        String[] parts = operationDetails.split(" ");
        if (parts.length == 4) {
            String name = parts[0];
            String description = parts[1];
            double price = Double.parseDouble(parts[2]);
            boolean available = Boolean.parseBoolean(parts[3]);

            MenuItem menuItem = new MenuItem(0, name, description, price, available);
            menuService.addMenuItem(menuItem);
            out.println("Menu item added successfully.");
            showMenu();
        } else {
            out.println("Invalid ADD command format");
            showMenu();
        }
    }

    private void handleUpdateMenuItem(String operationDetails) throws IOException, SQLException {
        String[] parts = operationDetails.split(" ");
        if (parts.length == 4) {
          //  int id = Integer.parseInt(parts[0]);
            String name = parts[0];
            String description = parts[1];
            double price = Double.parseDouble(parts[2]);
            boolean available = Boolean.parseBoolean(parts[3]);

            MenuItem menuItem = new MenuItem(id, name, description, price, available);
            menuService.updateMenuItem(menuItem);
            out.println("Menu item updated successfully.");
            showMenu();
        } else {
            out.println("Invalid UPDATE command format");
            showMenu();
        }
    }

    private void handleDeleteMenuItem(String operationDetails) throws IOException, SQLException {
        try {
            int id = Integer.parseInt(operationDetails);
            menuService.deleteMenuItem(id);
            out.println("Menu item deleted successfully.");
            showMenu();
        } catch (NumberFormatException e) {
            out.println("Invalid DELETE command format");
            showMenu();
        }
    }

    public void sendMessage(String message) {
        if (out != null) {
            out.println(message);
        }
    }
}
